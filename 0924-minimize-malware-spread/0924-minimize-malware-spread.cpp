/**
 * Approach:
 * - Use Union-Find to group connected components in the graph.
 * - For each node, merge it with its neighbors if there's an edge.
 * - Track the number of infected nodes in each connected component (CC).
 * - For each node in the initial infected list, calculate the impact of removing that node:
 *   - If a connected component has more than one infected node, it doesn't affect the solution.
 *   - If removing one infected node leads to a larger healthy component, choose that node.
 * - Sort the initial infected list to prioritize nodes with smaller indices in case of ties.
 * 
 * Time Complexity: O(n^2), where
 * Space Complexity: O(n), where
 */

class UnionFind
{
private:
    vector<int> size, parent;
    int forests;

    void link(int x, int y)
    {
        if (size[x] > size[y])
            swap(x, y); // force x to be smaller

        parent[x] = y;
        size[y] += size[x];
    }

public:
    UnionFind(int n)
    {
        size = vector<int>(n);
        parent = vector<int>(n);
        forests = n;

        for (int i = 0; i < n; ++i)
        {
            parent[i] = i;
            size[i] = 1;
        }
    }

    int findSet(int x)
    {
        if (x == parent[x])
            return x;
        return parent[x] = findSet(parent[x]);
    }

    bool unionSets(int x, int y)
    {
        x = findSet(x);
        y = findSet(y);
        if (x != y)
        {
            link(x, y);
            forests--;
        }
        return x != y;
    }

    int getSize(int x)
    {
        return size[findSet(x)];
    }
};

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) 
    {
        int n = graph.size();
        UnionFind uf(n);
        sort(initial.begin(), initial.end());  // To prioritize nodes with smaller indices

        // Union all the connected nodes
        for (int i = 0; i < n; ++i)
        {
            for (int j = 0; j < n; ++j)
            {
                if (graph[i][j])
                {
                    uf.unionSets(i, j);
                }
            }
        }

        int result = initial[0], maxInfected = INT_MIN;
        unordered_map<int, int> ccToinfectedCount;

        // Count the number of infected nodes in each connected component
        for (int val : initial)
        {
            int parent = uf.findSet(val);
            ccToinfectedCount[parent]++;
        }

        // For each infected node, calculate the largest CC that would remain if that node is removed
        for (int val : initial)
        {
            int parent = uf.findSet(val);
            int groupSize = uf.getSize(parent);
            
            if (ccToinfectedCount[parent] == 1 && maxInfected < groupSize)
            {
                maxInfected = groupSize;
                result = val;
            }
        }

        return result;
    }
};